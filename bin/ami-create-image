#!/usr/bin/env python

from amitools import clsetup
clsetup()

def get_args():
    import argparse
    parser = argparse.ArgumentParser(description='ami-create-image - Like ec2-create-image, but way better')
    parser.add_argument('instance_id',
                        help='Instance ID to create image from')
    parser.add_argument('-r', '--region',
                        help='''Specify REGION as the web service region to use.
Overrides the value specified by AWS_DEFAULT_REGION.
''')
    parser.add_argument('-n', '--name', default=None,
                        help='Name of the image')
    parser.add_argument('-N', '--random-name', default=None,
                        help='Prefix for random name of an image')
    parser.add_argument('-d', '--description', default=None,
                        help='Description of the image')
    parser.add_argument('--no-reboot', default=False, action='store_true',
                        help='If specified, the instance will not be rebooted during the bundle process.')
    parser.add_argument('-b', '--block-device-mapping', default=None,
                        help='')
    args = parser.parse_args()
    assert args.block_device_mapping is None, "Don't support block device mappings yet"
    return args

if '__main__' == __name__:
    args = get_args()
    import datetime
    import time
    from amitools import (
        EC2ImageWatcher,
        get_instance,
        random_name,
        ec2connect,
        tag_image,
        )

    if args.name is None:
        args.name = random_name(args.random_name)
    if args.description is not None:
        params['description'] = args.description
    if args.no_reboot:
        params['NoReboot'] = True

    conn = ec2connect()
    image_id = conn.create_image(
        args.instance_id,
        args.name,
        description=args.description,
        no_reboot = args.no_reboot,
        )
    image_watcher = EC2ImageWatcher(image_id, conn)
    image_watcher.waiton_exists()
    # AMI image creation started. While that's cooking, set up tags
    image = image_watcher.resource
    source_instance = get_instance(conn, args.instance_id)
    tag_image(
        conn,
        image.id,
        source_instance.image_id,
        args.instance_id,
        datetime.datetime.utcnow(),
        )
    # Done, now report the image
    print('\t'.join([
            'IMAGE',
            image_id,
            ]))
